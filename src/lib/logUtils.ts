
/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ConsoleViewer
 */

import { toast } from "sonner";
import { decodeJWT } from "./securityUtils";

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 
 * –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —á–µ—Ä–µ–∑ toast
 */
export const logWarning = (message: string, details?: string) => {
  console.warn(`‚ö†Ô∏è [WARN] ${message}`);
  
  toast.error(message, {
    description: details
  });
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 * –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —á–µ—Ä–µ–∑ toast
 */
export const logError = (message: string, error?: any) => {
  console.error(`‚ùå ${message}`, error);
  
  toast.error(message, {
    description: error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
  });
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export const logSuccess = (message: string, details?: string) => {
  console.log(`‚úÖ ${message}`);
  
  toast.success(message, {
    description: details
  });
};

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export const logInfo = (message: string, details?: string) => {
  console.log(`‚ÑπÔ∏è ${message}`);
  
  if (details) {
    toast(message, { 
      description: details 
    });
  }
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * —Å –≤—ã–≤–æ–¥–æ–º –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
 */
export const logAuthStatus = (token: string, headerName: string) => {
  if (!token) {
    console.error('‚ùå [AUTH] –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.');
    return;
  }
  
  console.log('‚úÖ [AUTH] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log(`‚úÖ [AUTH] –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${headerName}`);
  console.log(`‚úÖ [AUTH] –¢–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤): ${token.substring(0, 20)}...`);
  console.log(`‚úÖ [AUTH] –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: ${token.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "ey")
  if (token.startsWith('ey')) {
    console.log('‚úÖ [AUTH] –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: –ø–æ—Ö–æ–∂–µ –Ω–∞ JWT');
    
    // –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const decoded = decodeJWT(token);
    if (decoded) {
      const { payload } = decoded;
      
      console.log('üìã [AUTH] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ JWT:');
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
      if (payload.exp) {
        const expirationTime = new Date(payload.exp * 1000);
        const now = new Date();
        const isExpired = now > expirationTime;
        
        if (isExpired) {
          console.error(`‚ùå [AUTH] –¢–æ–∫–µ–Ω –ü–†–û–°–†–û–ß–ï–ù! –ò—Å—Ç–µ–∫: ${expirationTime.toLocaleString()}`);
        } else {
          console.log(`‚úÖ [AUTH] –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${expirationTime.toLocaleString()}`);
          
          // –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
          const daysLeft = Math.floor((expirationTime.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));
          console.log(`‚úÖ [AUTH] –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ ${daysLeft} –¥–Ω–µ–π`);
        }
      } else {
        console.warn('‚ö†Ô∏è [AUTH] –í —Ç–æ–∫–µ–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ exp (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è)');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–∫–µ–Ω–∞
      if (payload.ent !== undefined) {
        console.log(`‚ÑπÔ∏è [AUTH] –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–∫–µ–Ω–∞ (ent): ${payload.ent}`);
        
        switch (payload.ent) {
          case 1:
            console.log('‚ÑπÔ∏è [AUTH] –¢–∏–ø: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ API)');
            break;
          default:
            console.log(`‚ÑπÔ∏è [AUTH] –¢–∏–ø: –î—Ä—É–≥–æ–π (${payload.ent})`);
        }
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è JWT
      console.log('üìã [AUTH] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è JWT:');
      Object.entries(payload).forEach(([key, value]) => {
        if (!['exp', 'ent'].includes(key)) {
          console.log(`‚ÑπÔ∏è [AUTH] ${key}: ${value}`);
        }
      });
    } else {
      console.warn('‚ö†Ô∏è [AUTH] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT —Ç–æ–∫–µ–Ω');
    }
  } else {
    console.warn('‚ö†Ô∏è [AUTH] –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞: –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JWT!');
  }
};
